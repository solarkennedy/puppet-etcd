#!/bin/bash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Daemon User
ETCD_USER="etcd"

# Discovery Endpoint
#  Leave it as the public URL unless you are running your own.
ETCD_DISCOVER_ENDPOINT="https://discovery.etcd.io/"

# Discovery Token
#  If you are using the discovery protocol you can grab your cluster token
#  from https://discovery.etcd.io/new if you are not hosting it yourself.
ETCD_DISCOVERY_TOKEN=""

# Peer list
#  You can specify a list here sepearated by commas, or leave it blank if
#  you're playing with a single node.
ETCD_PEERS=""

# This node's name as it represents itself on the cluster.
ETCD_NODE_NAME="etcd.test.local"

# Hostname and port for the etcd server to work on.
ETCD_LISTEN="etcd.test.local:4001"

# Directory to store log and snapshot.
ETCD_DATA_DIR="/var/lib/etcd"

# File to log stdout/stderr to.
ETCD_OUT_FILE="/var/log/etcd/etcd.out"

# Set logging vebosity for the file above.
#   Valid options are "", "v" or "vv"
ETCD_LOGGING=""

# Max size of result buffer.
ETCD_MAXRESULT=1024

# Number of retries to attempt while joining a cluster
ETCD_RETRIES=3

# Set security settings for the etcd server.
#  Leave blank if you do not plan to use this feature, otherwise add appropriate
#  paths.
ETCD_CAFILE=""
ETCD_CERT=""
ETCD_KEY=""

# Toggles snapshotting.
#  Keep blank or set to true.
ETCD_SNAPSHOT="true"
ETCD_SNAPSHOT_COUNT="10000"

# Hostname and port for the RAFT server to work on.
RAFT_LISTEN="etcd.test.local:7001"

# Set security settings for the RAFT server.
#  Leave blank if you do not plan to use this feature, otherwise add appropriate
#  paths.
RAFT_CAFILE=""
RAFT_CERT=""
RAFT_KEY=""

# Below we build the opts to pass to the init script.

ETCD_OPTS="-name=${ETCD_NODE_NAME} \
          -addr=${ETCD_LISTEN} \
          -peer-addr=${RAFT_LISTEN} \
          -data-dir=${ETCD_DATA_DIR} \
          -max-result-buffer=${ETCD_MAXRESULT} \
          -max-retry-attempts=${ETCD_RETRIES}"

if [ x$ETCD_DISCOVERY_TOKEN != "x" ]; then
  ETCD_OPTS="$ETCD_OPTS -discovery=${ETCD_DISCOVER_ENDPOINT}${ETCD_DISCOVERY_TOKEN}"
fi

if [ x$ETCD_PEERS != "x" ]; then
  ETCD_OPTS="$ETCD_OPTS -peers ${ETCD_PEERS}"
fi

if [ "$ETCD_LOGGING" == "v" ]; then
  ETCD_OPTS="$ETCD_OPTS -v"
elif [ "$ETCD_LOGGING" == "vv" ]; then
  ETCD_OPTS="$ETCD_OPTS -vv"
fi

if [ x$ETCD_SNAPSHOT != "x" ]; then
  ETCD_OPTS="$ETCD_OPTS -snapshot --snapshot-count=${ETCD_SNAPSHOT_COUNT}"
fi

if [ x$ETCD_CAFILE != "x" ] && [ x$ETCD_CERT != "x" ] && [ x$ETCD_KEY != "x" ]; then
  ETCD_OPTS="$ETCD_OPTS -ca-file=${ETCD_CAFILE} -cert-file=${ETCD_CERT} -key-file=${ETCD_KEY}"
fi

if [ x$RAFT_CAFILE != "x" ] && [ x$RAFT_CERT != "x" ] && [ x$RAFT_KEY != "x" ]; then
  ETCD_OPTS="$ETCD_OPTS -peer-ca-file=${RAFT_CAFILE} -peer-cert-file=${RAFT_CERT} -peer-key-file=${RAFT_KEY}"
fi

# TODO
# Add support for:
#  -peers-file
#  -config
#  -cors 
#  -cpuprofile
